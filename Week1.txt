1.加一
https://leetcode-cn.com/problems/plus-one/submissions/

class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
//从后往前判断。若是9，则赋值为0，否则＋1，同时返回数组
        for(int i(digits.size()-1);i>=0;i--){
            if(digits[i]!=9){
                digits[i]+=1;
                return digits;
            }
            else
            digits[i]=0;
        }
//所有位为9，+1变成10000....，数组长度+1
        digits[0]=1;
        digits.push_back(0);
        return digits;
        }
};
2.和为k的子数组
https://leetcode-cn.com/problems/subarray-sum-equals-k/submissions/
没做出，问题：负数[-1,-1,1],0  输出为0
思路：数组长度不为1，用k(temp)依次减去每一项，同时判断temp是否为负数，是就计数一个子数组，同时中止该层循环
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int temp(k),n(0);
        if(nums.size()!=1){
//数组长度不为1
      for(int i(nums.size());i>0;i--){
          for(int j(i-1);j>0;j--){
        temp=temp-nums[j];
        if(temp<=0){
           n++;
           break;
            }
           }
          }
        }
        else{
            if(temp>0&&temp<=nums[0])
              n=1;
              else
              n=0;
        }
            return n;
    }
};
3.合并两个有序链表
https://leetcode-cn.com/problems/merge-two-sorted-lists/submissions/
//递归思想
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==NULL)
        return l2;
        if(l2==NULL)
        return l1;
        if(l1->val<=l2->val){
            l1->next=mergeTwoLists(l1->next,l2);
            return l1;
        }
        else{
        l2->next=mergeTwoLists(l1,l2->next);
        return l2;
        }
    }
};